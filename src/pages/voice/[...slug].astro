---
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const voiceEntries = await getCollection('voice');
  return voiceEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}
const { entry } = Astro.props;
---

<h1>{entry.data.text}</h1>
<iframe
  id="youtube-embed"
  width="560"
  height="315"
  src={`https://www.youtube.com/embed/${entry.data.ytid}?si=M8WBjCexaZ3_pktr&enablejsapi=1`}
  title="YouTube video player"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
  referrerpolicy="strict-origin-when-cross-origin"
  allowfullscreen
  data-start={entry.data.start}
  data-during={entry.data.during}
>
</iframe>
<button id="youtube-play"> play() </button>

<script>
  const iframe = document.querySelector<HTMLIFrameElement>('#youtube-embed')!;
  const player = iframe.contentWindow!;

  // 再生開始と終了のタイミング (秒単位、0.5秒も指定可能)
  const startTime = Number(iframe.dataset.start);
  const duringTime = Number(iframe.dataset.during);

  // 再生開始
  iframe.onload = () => {
    sendCommand({
      event: 'command',
      func: 'seekTo',
      args: [startTime],
    });
    sendCommand({
      event: 'command',
      func: 'pauseVideo',
    });
  };

  const button = document.querySelector<HTMLButtonElement>('#youtube-play')!;
  button.addEventListener('click', () => {
    playFromTo();
  });

  // 再生を開始する関数
  function playFromTo() {
    // 動画を再生
    sendCommand({
      event: 'command',
      func: 'playVideo',
    });
    // 終了時間になったら停止するタイマーを設定
    setTimeout(() => {
      sendCommand({
        event: 'command',
        func: 'pauseVideo',
      });
    }, duringTime * 1000);
  }

  // YouTube プレーヤーにメッセージを送信して操作
  function sendCommand(command: any) {
    player.postMessage(JSON.stringify(command), '*');
  }
</script>
